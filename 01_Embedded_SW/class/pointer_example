/***********************************************************/
// [1-1]  버퍼의 요소수 계산
/***********************************************************/

#if 0

#include <stdio.h>

void main(void)
{
	int a[10];

	int *start = &a[0];
	int *end = &a[9] + 1;
	int *p = &a[3];

	printf("%d\n", sizeof(a) / sizeof(a[0]));

	printf("%d\n", (p - start) / sizeof(int));
	printf("%d\n", (end-start)/sizeof(int));
	printf("%d\n", (end-p)/sizeof(int));
}

#endif

/***********************************************************/
// [1-2] 주소의 연산과 타입 승계
/***********************************************************/

#if 0

#include <stdio.h>

void main(void)
{
	int *p, *q;

	p = (int *)0x1008;
	q = (int *)0x1000;

	printf("%#x\n", p*q);
	printf("%#x\n", p / q);
	printf("%#x\n", p + q);
	printf("%#x\n", p - q);

	printf("%#x\n", p * 2);
	printf("%#x\n", p / 2);
	printf("%#x\n", p + 2);
	printf("%#x\n", p - 2);
}

#endif

/***********************************************************/
// [1-5] 배열 parameter
/***********************************************************/

#if 0

#include <stdio.h>

int sum(int b[4])
{
	int i, sum = 0;

	for(i=0; i<(sizeof(b)/sizeof(b[0])); i++)
	{
		sum += b[i];
	}
	return sum;
}

void main(void)
{
	int a[4] = {1,2,3,4};

	printf("%d\n", sum(a));
}

#endif

#if 0

#include <stdio.h>

void func(int b[5])
{
	printf("%x\n", b);
	printf("%x\n", &b[0]);
	printf("%d\n", sizeof(b));
}

void main(void)
{
	int a[5] = {10,20,30,40, 50};

	printf("%x\n", a);
	printf("%x\n", &a[0]);
	printf("%d\n", sizeof(a));
	func(a);
}

#endif

/***********************************************************/
// [1-6] 배열 활용식을 이용한 배열 요소 액세스
/***********************************************************/

#if 0 

#include <stdio.h>

int a[4] = {1,2,3,4};
	
void main(void)
{
	printf("%d\n", a[0]);
	printf("%d\n", a[3]);
	printf("%d\n", a[4]);
	printf("%d\n", a[-1]);

	printf("%d\n", (a+1)[2]);
	printf("%d\n", a[3]);

	printf("%d\n", a[2]);
	printf("%d\n", *(a+2));
	printf("%d\n", *(2+a));
	printf("%d\n", 2[a]);
}

#endif

/**********************************************************/
// [3-2] : 무엇이 인쇄될까요?
/**********************************************************/

#if 0

#include <stdio.h>

void main(void)
{
	char a[4] = "LEW";
	char *p = a;

	printf("%X:%X \n", p, &p);
	printf("%X:%X \n", a, &a);
	printf("%X:%X \n", main, &main);
	printf("%X:%X \n", "LEW", &"LEW");
}

#endif

/**********************************************************/
// [3-3] : 포인터 배열
/**********************************************************/

#if 0

#include <stdio.h> 

int x[4] = {1,2,3,4};

void main(void)
{
	int *a[4] = {x+3, x+2, x+1, x};
	
	printf("%d\n", x[2]);	

	// 배열 a를 이용하여 x[2]를 30으로

	     = 30;   

	printf("%d\n", x[2]);
}

#endif

/**********************************************************/
// [3-4] : 대치법 활용
/**********************************************************/

#if 0

#include <stdio.h> 

int x[4] = {1,2,3,4};

int *f1(void)
{
	return x;
}

void f2(int *p)
{
	printf("%d == %d == %d == %d\n", x[2], *(x+2), p[0], *p);
}

void main(void)
{
	int *p;
	int *a[4] = {x+3, x+2, x+1, x};

	p=x;

	printf("%d == %d\n", x[2], p[2]);
	printf("%d == %d == %d == %d\n", x[2], *(x+2), a[3][2], *a[1]);
	printf("%d == %d == %d == %d\n", x[2], *(x+2), f1()[2], *(f1()+2));
	f2(x+2);
}

#endif

/**********************************************************/
// [3-12] : 구조체의 함수 전달
/**********************************************************/

#if 0

#include <stdio.h> 

struct math
{
	int id;
	char name[20];
	int score;
}mid, final={1, "Kim", 50};

void main(void)
{
	mid = final;
	
	printf("%d\n", mid.id);
	printf("%s\n", mid.name);
	printf("%d\n", mid.score);
}

#endif

#if 0

#include <stdio.h>

struct math
{
	int id;
	char name[20];
	int score;
};

void cheat(struct math test);

void main(void)
{
	struct math final={1, "Kim", 50};
	cheat(final);
	printf("%d\n", final.score);
}

void cheat(struct math test)
{
	test.score = 100;
}

#endif

/**********************************************************/
// [3-13] : 구조체 주소의 함수 전달
/**********************************************************/

#if 0

#include <stdio.h> 
 
struct math
{
	int id;
	char name[20];
	int score;
};

void cheat(struct math * test);

void main(void)
{
	struct math final={1, "Kim", 50};
	cheat(&final);
	printf("%d\n", final.score);
}

void cheat(struct math * test)
{
	(*test).score = 100;
}

#endif

/**********************************************************/
// [4-3] : 2차원배열의 전달
/**********************************************************/

#if 0

#include <stdio.h>

void draw_pixel(int y, int x, int value, int *p)
{
	p[y * 3 + x] = value;
}

void main(void)
{
	int a[2][3] = { 1,2,3,4,5,6 };

	printf("%d\n", a[1][2]);
	draw_pixel(1, 2, 10, a);
	printf("%d\n", a[1][2]);
}

#endif

#if 0

#include <stdio.h>

void draw_pixel(int y, int x, int value, int (*p)[3])
{
	p[y][x] = value;
}

void main(void)
{
	int a[2][3] = {1,2,3,4,5,6};

	printf("%d\n", a[1][2]);
	draw_pixel(1, 2, 10, a);
	printf("%d\n", a[1][2]);
}

#endif

/**********************************************************/
// [4-4] : 2차원배열의 리턴
/**********************************************************/

#if 0

typedef int (*ARRP)[4];

#include <stdio.h>

ARRP func(void)
{
	static int a[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};
	return a;
}

void main(void)
{
	printf("%d\n", func()[1][2]);
}

#endif

/***********************************************************/
// [5-0] : 함수의 실행
/***********************************************************/

#if 0

#include <stdio.h>

int add(int a, int b)
{
	return a + b;
}

void main(void)
{
	printf("%d\n", add(3, 4));
	printf("%d\n", (&add)(3, 4));
	printf("%d\n", (*add)(3, 4));
}

#endif

/***********************************************************/
// [5-1] : 함수 등가포인터의 실행
/***********************************************************/

#if 0

#include <stdio.h>

int add(int a, int b)
{
	return a+b;
}	

void f1(void)
{
	printf("func\n");
}

int * f2(void)
{
	static int a[4] = {1,2,3,4};

	return a;
}

void main(void)
{
	// p, q, r 선언
	int (*p)(int a, int b);
	void (*q)(void);
	int *(*r)(void);

	// p, q, r에 대응 함수 대입
	p = add;
	q = f1;
	r = f2;
	printf("%d\n", add(3,4));
	f1();
	printf("%d\n", f2()[2]);


	// 위와 동일한 결과가 나오도록 p, q, r로 실행
	printf("%d\n", p(3,4));
	q();
	printf("%d\n", r()[2]);
}

#endif

/***********************************************************/
// [5-2] : 함수를 함수에 전달하자
/***********************************************************/

#if 0

#include <stdio.h> 

int add(int a, int b)
{
	return a+b;
}

int sub(int a, int b)
{
	return a-b;
}

void func(int *p(int a, int b))
{
	printf("%d\n", p(3,4));
}

void main(void)
{
	func(add);
	func(sub);
}

#endif

/***********************************************************/
// [5-4] : 조건에 따른 함수 호출 엔진
/***********************************************************/

#if 0

#include <stdio.h> 
#include <stdlib.h> 

int add(int a, int b)
{
	return a+b;
}

int sub(int a, int b)
{
	return a-b;
}

int mul(int a, int b)
{
	return a*b;
}

int get_key(void)
{
	return rand() % 3;// 0~2 return 
}

int op(int a, int b)
{
	switch(get_key())
	{
		case 0	: return add(a,b);
		case 1	: return sub(a,b);
		case 2	: return mul(a,b);
	}
}

void main(void)
{
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
}

#endif

/***********************************************************/
// [5-5] : 함수 Lookup table
/***********************************************************/

#if 0

#include <stdio.h> 
#include <stdlib.h> 

int add(int a, int b)
{
	return a+b;
}

int sub(int a, int b)
{
	return a-b;
}

int mul(int a, int b)
{
	return a*b;
}

int get_key(void)
{
	return rand() % 3;
}

       fa[3]        = {add, sub, mul};

int op(int a, int b)
{
	return fa[get_key()](a,b);
}

void main(void)
{
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
	printf("%d\n", op(3, 4));
}

#endif

/***********************************************************/
// [7-1] : Type casting 연습 1
/***********************************************************/

#if 0

#include <stdio.h>

void func(int x)
{
	double* y = (double*)x;

	printf("%f\n", y[0]);
	printf("%f\n", y[1]);
	printf("%f\n", y[2]);
}

void main(void)
{
	double d[3] = {3.14, 5.125, -7.42};

	func((int)d);
}

#endif

#if 0

#include <stdio.h>

void func(int x)
{
	int i;

	for(i=0; i<3; i++)
	{

	}
}

void main(void)
{
	double d[3] = {3.14, 5.125, -7.42};

	func((int)d);
}

#endif

/***********************************************************/
// [7-2] : Type casting 연습 2
/***********************************************************/

#if 0

#include <stdio.h>

void func(void * p)
{
	int i;

	for(i=0; i<3; i++)
	{
		printf("%f\n",(*(double**)p)[i]);
	}
}

void main(void)
{
	double d[3] = {3.14, 5.125, -7.42};
	void *p = d;

	func(&p);
}

#endif

/***********************************************************/
// [7-3] :  Type casting 연습 3
/***********************************************************/

#if 0

#include <stdio.h>

void func(void *p)
{
	printf("%s\n",    *(char**)p      );
}

void main(void)
{
	char * p = "Willtek";
	func(&p);
}

#endif

/***********************************************************/
// [7-5] : int 변수로 함수 실행하기
/***********************************************************/
#if 01

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main(void)
{
//N과 M은 8보다 크거나 같고, 50보다 작거나 같은 자연수
//둘째 줄부터 N개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.
	int M, N;
	int i, j;
	char chess[50][51] = { 0, };// chess[x][50] = \0;
	char pattern1[8][8] = {
		{'W','B','W','B','W','B','W','B'},
		{'B','W','B','W','B','W','B','W'},
		{'W','B','W','B','W','B','W','B'},
		{'B','W','B','W','B','W','B','W'},
		{'W','B','W','B','W','B','W','B'},
		{'B','W','B','W','B','W','B','W'},
		{'W','B','W','B','W','B','W','B'},
		{'B','W','B','W','B','W','B','W'}
	};
	char pattern2[8][8] = {
		{'B','W','B','W','B','W','B','W'},
		{'W','B','W','B','W','B','W','B'},
		{'B','W','B','W','B','W','B','W'},
		{'W','B','W','B','W','B','W','B'},
		{'B','W','B','W','B','W','B','W'},
		{'W','B','W','B','W','B','W','B'},
		{'B','W','B','W','B','W','B','W'},
		{'W','B','W','B','W','B','W','B'}
	};
	scanf("%d %d", &M, &N);

	for (i = 0; i < M; i++)
	{
		scanf("%s", chess[i]);
	}
	int MIN = 2500;
	int a = 0, b = 0;

	while (1)
	{
		int error1 = 0;
		int error2 = 0;
		for (i = 0; i < 8; i++)
		{
			for (j = 0; j < 8; j++)
			{
				if (chess[a + i][b + j] != pattern1[i][j])
				{
					error1++;
				}
				if (chess[a + i][b + j] != pattern2[i][j])
				{
					error2++;
				}
			}
		}
		if (error1 > error2)
		{
			error1 = error2;
		}
		if (MIN > error1)
		{
			printf("\n%d %d\n", a, b);
			MIN = error1;
		}
		b++;
		if (b == N - 7)
		{
			b = 0;
			a++;
		}
		if (a == M - 7)
		{
			break;
		}

	}
	printf("%d", MIN);

	return 0;
}

#endif
